variables:
  CARGO_HOME: $CI_PROJECT_DIR/cargo
  RUST_BACKTRACE: "1"

cache:
  key: $CI_BUILD_STAGE-$CI_BUILD_REF_NAME
  paths:
    - $HOME/.cargo
    - cargo/
    - target/
    - apt-cache/
    - kcov/

windows:stable:
  script:
    ### init variables
    - |
      set SODIUM_STATIC=1
      set SODIUM_LIB_DIR=C:\GitLab-Runner\libsodium

    ### set rustup version
    - rustup default stable

    ### run build, test and doc
    - |
      cargo build --verbose
      cargo test --verbose
      cargo doc
  stage: build
  tags:
    - tox
    - windows

.linux_before_template: &linux_before_script
  ### init variables
  - |
    export PKG_CONFIG_ALLOW_CROSS=1
    export TRAVIS_JOB_ID=$CI_BUILD_ID

  ### install libsodium
  - |
    curl --location --output libsodium18_1.0.13-1_amd64.deb http://archive.ubuntu.com/ubuntu/pool/universe/libs/libsodium/libsodium18_1.0.13-1_amd64.deb
    curl --location --output libsodium-dev_1.0.13-1_amd64.deb http://archive.ubuntu.com/ubuntu/pool/universe/libs/libsodium/libsodium-dev_1.0.13-1_amd64.deb
    sudo dpkg -i libsodium-dev_1.0.13-1_amd64.deb libsodium18_1.0.13-1_amd64.deb

.linux_template: &linux_script
  ### run build, test and doc
  - |
    cargo build --verbose
    cargo test --verbose
    cargo doc

linux:v1-24-0:
  image: rustdocker/rust:1.24.0
  before_script: *linux_before_script
  script: *linux_script
  after_script:
    ### measure code coverage and upload to coveralls.io
    - |
      CARGO_TARGET_DIR=target/ cargo install --force cargo-travis || echo "cargo-travis has been already installed"
      export PATH=$HOME/.cargo/bin:$PATH
      cargo coveralls
  stage: build
  tags:
    - linux
    - docker

linux:stable:
  image: rustdocker/rust:stable
  before_script: *linux_before_script
  script: *linux_script
  stage: build
  tags:
    - linux
    - docker

linux:beta:
  allow_failure: true
  image: rustdocker/rust:beta
  before_script: *linux_before_script
  script: *linux_script
  stage: build
  tags:
    - linux
    - docker

linux:nightly:
  allow_failure: true
  image: rustdocker/rust:nightly
  before_script: *linux_before_script
  script:
    ### run build, test and doc
    - |
      cargo build --verbose --features "clippy"
      cargo test --verbose --features "clippy"
      cargo doc
  stage: build
  tags:
    - linux
    - docker

other:kcov-and-check-commit-message:
  image: rustdocker/rust:1.24.0
  script:
    ### export env variables and create dirs
    - |
      export APT_CACHE_DIR=`pwd`/apt-cache && mkdir -pv $APT_CACHE_DIR
      export KCOV_DIR=`pwd`/kcov && mkdir -pv $KCOV_DIR
      export ROOT_DIR=`pwd`
      rm -rf target/kcov || echo 'target/kcov not exist'

    ### Script for verifying conformance to commit message format of commits in commit
    ### range supplied.
    - |
      ./scripts/verify-commit-messages.sh "$CI_COMMIT_BEFORE_SHA..$CI_COMMIT_SHA"

    ### build kcov for 1.24.0
    - |
      sudo apt-get remove kcov -y || echo 'ok'
      sudo apt-get -o dir::cache::archives="$APT_CACHE_DIR" update -yq
      sudo apt-get -o dir::cache::archives="$APT_CACHE_DIR" install build-essential libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev libiberty-dev zlib1g-dev cmake -yq
      cd $KCOV_DIR && git clone https://github.com/SimonKagstrom/kcov || echo 'kcov exist'
      cd kcov && cmake . && make && make install || echo 'kcov exist'
      cd $ROOT_DIR
  stage: build
  tags:
    - linux
    - docker
